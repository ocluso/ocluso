/*
 * Copyright (C) 2020 The ocluso Authors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"

	"ocluso/pkg/moduleinterface"
)

const basePackage = "ocluso"

func handleError(e error) {
	if e != nil {
		log.Fatal(e)
	}
}

func collectModuleNames() []string {
	moduleNames := make([]string, 0)

	dirEntries, err := ioutil.ReadDir("modules")
	handleError(err)

	for _, dirEntry := range dirEntries {
		if !dirEntry.IsDir() {
			continue
		}

		moduleNames = append(moduleNames, dirEntry.Name())
	}

	return moduleNames
}

func moduleInfoToSrc(info *moduleinterface.ModuleInfo) string {
	log.Println("moduleInfoToSrc - Not implemented!")
	return "moduleinterface.ModuleInfo{}"
}

func readModuleInfo(moduleName string) moduleinterface.ModuleInfo {
	log.Println("readModuleInfo - Not implemented!")
	return moduleinterface.ModuleInfo{}
}

func main() {
	moduleNames := collectModuleNames()

	f, err := os.Create("pkg/moduleindex/moduleindex.go")
	handleError(err)

	defer f.Close()

	fmt.Fprintln(f, "/* This file was generated by gen-moduleindex.go - please do not edit */")
	fmt.Fprintln(f, "package moduleindex")

	fmt.Fprintln(f, "\nimport \""+basePackage+"/pkg/moduleinterface\"")

	for _, name := range moduleNames {
		fmt.Fprintln(f, "import \""+basePackage+"/modules/"+name+"\"")
	}

	fmt.Fprintln(f, "\nvar LoadedModules = map[string]ModuleIndexEntry{")

	for _, name := range moduleNames {
		moduleInfo := readModuleInfo(name)
		moduleInfoSrc := moduleInfoToSrc(&moduleInfo)
		fmt.Fprintln(f, "    \""+name+"\": ModuleIndexEntry{ Info: "+moduleInfoSrc+", Factory: "+name+".BuildModule },")
	}

	fmt.Fprintln(f, "}")
}
